Topics:

 ** Final Keyword
 ** Exceptions 
 ** Abstraction

===============================
 * Final
 
     - final with class : you can not inherit
     - final with method: you can not override
     - final with variable: you can not change value afer you assign.

 ====================================

* Exceptions

Exceptions Topic:
		1. Unchecked vs Checked
		2. try & catch blocks
		3. Multi-catch block
		4. finally block
		
1- Compile Time Exceptions (Checked )
2- Run Time Exceptions (Unchecked) --> Parent Class RunTimeException

Difference between Error and Exception 

1- Exception can be recovered by using the try-catch block. An error cannot be recovered.
2-Exception can be classified into two categories i.e. checked and unchecked. All errors in Java are unchecked.
3- Exception occurs at compile time or run time. Error occurs at run time.


Error

Errors are problems that mainly occur due to the lack of system resources. It cannot be caught or handled. It indicates a serious problem. It occurs at run time. These are always unchecked. 

printStackTrace() : prints the full details
getMessage():breefly description






OutOfMemoryError: heap memory is full



Exceptions: unexpected or unwanted events

		Unchecked (unexpected event): occurs during the runtime

					all the RuntimeExceptions are unchecked exceptions

		checked (unwanted event): occurs during the compile time

					all the exceptions that are not RuntimeExceptions are checked exception



Exception handlings:
		
		1. Try & Catch blocks: used for handling checked and unchecked exceptions

						try{

							exception code

						}catch(ExceptionClass  e){

							e.printStackTrace();

						}


			Multi-catch block: parent exception type can not be placed before the child exception type

			finally block: always gets executed regardless of the exception is being handled or not handled

							to stop the execution of the finally block: Syste.exit(0)




===============================
* Abstraction 


class: blueprint of objects
	   specifies what the object MUST have
	   can be instantiated
	   can be final

________________________________________________
abstract class: meant to be parent 
			    can have abstract method
			    can not be instantiated
			    can not be final

			    MUST contain the common features of all the subclasses

________________________________________________
interface: blueprint of class
		   specifies what the class(es) must have
		   can not be instantiated
		   can not be final
________________________________________________
		     to provide additional methods that any class needs

=============================================================		   
		   What interface can have?
		   		variables:final static variables ONLY

		   		methods: abstract method, default method, static method

		   		Access modifier: public ONLY
________________________________________________
		   what interface can not have?
		   		Instance variable
		   		Instance methods
		   		Constructor
		   		Blocks
		   		private, deafult, protected access mdofiers
________________________________________________
		   why we need interface?
		   		one class can extend one class ONLY
		   		one class can implements multiple interfaces
		   			(Multiple inheritance is allowed)

		   		100% abstraction




Abastract class vs interface: both are used for achieving abstraction
							  both can not be instantiated
							  both can not be final
							  both are meant to be inherited


		  	abstract class: one class can extends one abstract class

		  					can have instances & statics

		  					can have constructor

		  					4 access mdofiers

		  	interface: one class can implement multiple interfaces



extends vs implements: both are used for inheritance
		
		extends:
				class extends class
				interface extends interface(s)

		implements:
				class implements interface(s)


		extends & implements:
				extends first then implements




--- Abstraction: focusing on the essentials without worrying about the small details(implementations) of the method


